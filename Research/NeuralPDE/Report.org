#+TITLE: Report

#+begin_src julia :session main :result output
using NeuralPDE, Flux, ModelingToolkit, GalacticOptim, Optim, DiffEqFlux
using Quadrature, Cuba, CUDA, QuasiMonteCarlo
import ModelingToolkit: Interval, infimum, supremum
#+end_src

#+begin_src julia :session main :result output
@parameters t, x, N, L, ρ_hat, μ, c₀, τ, L, l,vₕ, k, m, ω, λ, γ
@variables v(..), ρ(..)
# ρ_hat=0.89;
m=1;
μ=1; #choose as we like
τ=1; #choose as we like
# l=sqrt(μ*τ/ρ_hat);

N = 168;
ρₕ = 0.168;
L=1000;
δρ₀ = 0.02;
δv₀ = 0.01;
vₕ = 5.0461*((1+exp((ρₕ-0.25)/0.06))^-1 - 3.72*10^-6);

# vhat(ρ)= 5.0461*((1+exp((ρ-0.25)/0.06))^-1 - 3.72*10^-6);
# using Roots
# find_zero(vhat, (-5,5))
# 1.0001069901803379

# ρₕ=N/L;
k=2π/L;

c₀= 1.8634;
Dt = Differential(t)
Dx = Differential(x)
Dxx = Differential(x)^2

# δρₛ(x) = δρ₀*exp(complex(0,1)*k*x);
λ=k^2*c₀^2/100
ω=k*(vₕ+c₀)
γ=complex(λ,ω)

# Complete complex term
δρ(t,x)=δρ₀*exp(complex(0,k*x))*exp(-γ*t)
δv(t,x)=δv₀*exp(complex(0,k*x))*exp(-γ*t)
# Only real part
δρᵣ(t,x)=δρ₀*cos(k*x)*cos(ω*t)exp(-λ*t)
δvᵣ(t,x)=δv₀*cos(k*x)*cos(ω*t)exp(-λ*t)

#2D PDE
eqs  = [Dt(v(t,x)) + v(t,x)*Dx(v(t,x)) - (μ/ρ(t,x))*Dxx(v(t,x)) + (c₀^2/ρ(t,x))*Dx(ρ(t,x)) - (5.0461*((1+exp((ρ(t,x)-0.25)/0.06))^-1 - 3.72*10^-6) - v(t,x))/τ ~ 0,
        Dt(ρ(t,x)) + Dx(ρ(t,x)*v(t,x)) ~ 0]

# Initial and boundary conditions
bcs = [ρ(t,0) ~ ρ(t,L),
       v(t,0) ~ v(t,L),
       Dt(v(t,0)) ~ Dt(v(t,L)),
       # max(ρ(t,x)) ~ ρₕ,
       ρ(0,x) ~ ρₕ + δρᵣ(0,x),
       v(0,x) ~ vₕ + δvᵣ(0,x)]

# Space and time domains
domains = [t ∈ Interval(0.0,999.0),
           x ∈ Interval(0.0,L)]

# Discretization
dx = 0.05
#+end_src

#+begin_src julia :session main :result output
# Neural network
inner = 25
chain = FastChain(FastDense(3,inner,Flux.σ),
                  FastDense(inner,inner,Flux.σ),
                  FastDense(inner,inner,Flux.σ),
                  FastDense(inner,inner,Flux.σ),
                  FastDense(inner,1))

initθ = CuArray(Float64.(DiffEqFlux.initial_params(chain)))

strategy = GridTraining(0.05)
discretization = PhysicsInformedNN(chain,
                                   strategy;
                                   init_params = initθ)
#+end_src

#+begin_src julia :session main :result output
@named pde_system = PDESystem(eqs,bcs,domains,[t,x],[v,ρ])
prob = discretize(pde_system,discretization)
symprob = symbolic_discretize(pde_system,discretization)

cb = function (p,l)
    println("Current loss is: $l")
    return false
end

res = GalacticOptim.solve(prob,ADAM(0.01);cb=cb,maxiters=2500)
#+end_src

#+begin_src julia :session main :result output
prob = remake(prob,u0=res.minimizer)
res = GalacticOptim.solve(prob,ADAM(0.001);cb=cb,maxiters=2500)

phi = discretization.phi
#+end_src

* TODO change variables to t and $\rho$
#+begin_src julia :session main :result output
ts,xs,ys = [infimum(d.domain):0.1:supremum(d.domain) for d in domains]
u_real = [analytic_sol_func(t,x,y) for t in ts for x in xs for y in ys]
u_predict = [first(Array(phi([t, x, y], res.minimizer))) for t in ts for x in xs for y in ys]
#+end_src

#+begin_src julia :session main :result output
ts, xs = [infimum(d.domain):1:supremum(d.domain) for d in domains]

u_predict1  = [phi[1]([t,x],minimizers_[1])[1] for t in ts for x in xs]
u_predict2  = [phi[2]([t,x],minimizers_[2])[1] for t in ts for x in xs]

u_predict1_m=reshape([Array(phi[1]([t, x], minimizers_[1]))[1] for t in ts for x in xs], length(ts), length(xs))
u_predict2_m=reshape([Array(phi[2]([t, x], minimizers_[2]))[1] for t in ts for x in xs], length(ts), length(xs))
#+end_src

* Error
#+begin_src julia :session main :result output
prob = discretize(pde_system,discretization)
#+end_src

#+begin_src shell
/usr/sbin/prime-run: line 2: 22331 Killed                  __NV_PRIME_RENDER_OFFLOAD=1 __VK_LAYER_NV_optimus=NVIDIA_only __GLX_VENDOR_LIBRARY_NAME=nvidia "$@"
[ble: exit 137]
#+end_src
