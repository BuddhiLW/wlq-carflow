#+startup: latexpreview
#+startup: imagepreview

* Libraries
#+begin_src julia :session main :result output
  using Pkg;
  Pkg.activate("~/PP/wlq/wiki/")
#+end_src

#+RESULTS:
: nothing

#+begin_src julia :session main :result output
  Pkg.add("Plots")
  Pkg.add("PyPlot")
#+end_src

#+RESULTS:

#+begin_src julia :session main :result output
  using Plots
  using PyPlot
#+end_src

#+RESULTS:

#+begin_src julia :session main :result output
1+3
#+end_src

#+RESULTS:
: 4

#+begin_src julia :session main :file 2.png :results file graphics
  PyPlot.plot(1:1:5)
  PyPlot.savefig("2.png")
#+end_src

#+RESULTS:
#+ATTR_HTML: :width 300px
[[file:2.png]]

* Reproduction
** First decay ODE

\begin{equation}
  \begin{aligned}
    y'(t) = -15y(t), \quad t\ge{}0,\, y(0)=1,\\
    \implies y(t) = e^{-15t}, \quad y(t)\to{}0 \; \text{as} \; t\to{}\infty.
  \end{aligned}
\end{equation}

*** Analytical
#+begin_src julia :session main :result output
  function y_an(t)
    return exp(-15*t)
  end
#+end_src

#+RESULTS:
: y_an

#+begin_src julia :session main :result output
ts = 0:0.01:1
#+end_src

#+RESULTS:
: 0.0:0.01:1.0

# <
#+begin_src julia :session main :result output
ys = map(t->y_an(t),ts)
#+end_src

*** EuE, h=1/4
**** The method
=Euler Explicit=

\begin{equation}
\begin{aligned}
y_{n+1}&=y_n + \Delta{t}.f(y_n, t_n) \\
&= y_n + \Delta{t}.f_n
\end{aligned}
\end{equation}

$\gamma$ will be your step functions.

**** =f= function
#+begin_src julia :session main :result output
  function f₁(n, Δt)
    return exp(-15*(n-1)*Δt)
  end
#+end_src

#+RESULTS:
: f₁

#+begin_src julia :session main :result output
  function f₁(y, n)
    return -15*y[n]
  end
#+end_src

#+RESULTS:
: f₁

**** EuE implementation
#+begin_src julia :session main :result output
  function EuE(y,f,n,Δt)
        return y[n] + Δt*f(y, n)
  end
#+end_src

#+RESULTS:
: EuE

***** EuE step function
#+begin_src julia :session main :result output
  function γ₁(f, y::Vector{Float64}, Δt)
      yl = copy(y)

      push!(yl, EuE(y,f,length(y),Δt))

      return yl
  end
#+end_src

#+RESULTS:
: γ₁

***** Initical condition
#+begin_src julia :session main :result output
  y₀=[1.]
#+end_src

#+RESULTS:
: [1.0]
***** Grid
#+begin_src julia :session main :result output
  tf = 1
  Δt = 1/4
  t = 0:Δt:tf
#+end_src

#+RESULTS:
: 0.0:0.25:1.0

***** Step function test
#+begin_src julia :session main :result output
  st1 = γ₁(f₁, y₀, Δt)
  st2 = γ₁(f₁, st1, Δt)
  γ₁(f₁, st2, Δt)
#+end_src

#+RESULTS:
: [1.0, -2.75, 7.5625, -20.796875]

**** Evolver
# (<[(
#+begin_src julia :session main :result output
  function evolveₖ(method, Δt, t_final=1.0, y₀=1.0, f=f₁)

      T = y₀
      t = 0.0

      ts = [t]
      results = [T]

      while t < t_final
          Tl = method(f,T,Δt) # new

          T = copy(Tl)
          push!(results, T)

          t += Δt
          push!(ts, t)
      end

      return ts, results
  end

#+end_src

#+RESULTS:
: evolveₖ

**** Tests
***** Initical condition
#+begin_src julia :session main :result output
  y₀=[1.]
#+end_src

#+RESULTS:
: [1.0]

***** Calling the Evolver
#+begin_src julia :session main :result output
  res = evolveₖ(γ₁, Δt, 1.0, y₀, f₁)
#+end_src

#+RESULTS:
: ([0.0, 0.25, 0.5, 0.75, 1.0], [[1.0], [1.0, -2.75], [1.0, -2.75, 7.5625], [1.0, -2.75, 7.5625, -20.796875], [1.0, -2.75, 7.5625, -20.796875, 57.19140625]])

*** EuE, h=1/8
#+begin_src julia :session main :result output
  Δt = 1/8
#+end_src

#+RESULTS:
: 0.125

#+begin_src julia :session main :result output
  res2 = evolveₖ(γ₁, Δt, 1.0, y₀, f₁)
#+end_src

#+RESULTS:
: ([0.0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0], [[1.0], [1.0, -0.875], [1.0, -0.875, 0.765625], [1.0, -0.875, 0.765625, -0.669921875], [1.0, -0.875, 0.765625, -0.669921875, 0.586181640625], [1.0, -0.875, 0.765625, -0.669921875, 0.586181640625, -0.512908935546875], [1.0, -0.875, 0.765625, -0.669921875, 0.586181640625, -0.512908935546875, 0.4487953186035156], [1.0, -0.875, 0.765625, -0.669921875, 0.586181640625, -0.512908935546875, 0.4487953186035156, -0.39269590377807617], [1.0, -0.875, 0.765625, -0.669921875, 0.586181640625, -0.512908935546875, 0.4487953186035156, -0.39269590377807617, 0.34360891580581665]]) 

*** Adams-Moulton, h=1/8
**** The method
=Trapezoidal=
\begin{equation}
\begin{aligned}
y_{n+1}&=y_n + \dfrac{1}{2}\Delta{t}.(f(y_n, t_n) + f(y_{n+1}, t_{n+1})) 
\end{aligned}
\end{equation}
**** AM Evolver
#+begin_src julia :session main :result output
  function AM(y,f,n,Δt)
        return (2/17)*(y[n] + (1/2)*Δt*(f(y, n)))
  end
#+end_src

#+RESULTS:
: AM

**** AM step function
#+begin_src julia :session main :result output
  function γ₂(f, y::Vector{Float64}, Δt)
      yl = copy(y)

      push!(yl, AM(y,f,length(y),Δt))

      return yl
  end
#+end_src

#+RESULTS:
: γ₂

**** Calling the Evolver
#+begin_src julia :session main :result output
  res3 = evolveₖ(γ₂, Δt, 1.0, y₀, f₁)
#+end_src

#+RESULTS:
: ([0.0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0], [[1.0], [1.0, 0.007352941176470588], [1.0, 0.007352941176470588, 5.406574394463669e-5], [1.0, 0.007352941176470588, 5.406574394463669e-5, 3.975422348870341e-7], [1.0, 0.007352941176470588, 5.406574394463669e-5, 3.975422348870341e-7, 2.923104668287013e-9], [1.0, 0.007352941176470588, 5.406574394463669e-5, 3.975422348870341e-7, 2.923104668287013e-9, 2.1493416678580965e-11], [1.0, 0.007352941176470588, 5.406574394463669e-5, 3.975422348870341e-7, 2.923104668287013e-9, 2.1493416678580965e-11, 1.580398285189778e-13], [1.0, 0.007352941176470588, 5.406574394463669e-5, 3.975422348870341e-7, 2.923104668287013e-9, 2.1493416678580965e-11, 1.580398285189778e-13, 1.1620575626395418e-15], [1.0, 0.007352941176470588, 5.406574394463669e-5, 3.975422348870341e-7, 2.923104668287013e-9, 2.1493416678580965e-11, 1.580398285189778e-13, 1.1620575626395418e-15, 8.544540901761334e-18]])

*** Plots
#+begin_src julia :session main :result output
  PyPlot.plot(res[1], res[2][length(res[2])])
#+end_src

#+RESULTS:
: PyCall.PyObject[PyObject <matplotlib.lines.Line2D object at 0x7fa9bc0471c0>]

#+begin_src julia :session main :result output
PyPlot.plot(ts,ys)
#+end_src

#+RESULTS:
: PyCall.PyObject[PyObject <matplotlib.lines.Line2D object at 0x7fa9bc07ed90>]

#+begin_src julia :session main :result output
  PyPlot.plot(res2[1], res2[2][length(res2[2])])
#+end_src

#+RESULTS:
: PyCall.PyObject[PyObject <matplotlib.lines.Line2D object at 0x7fa9b427ceb0>]

#+begin_src julia :session main :result output
  PyPlot.plot(res3[1], res3[2][length(res3[2])])
#+end_src

#+RESULTS:
: PyCall.PyObject[PyObject <matplotlib.lines.Line2D object at 0x7fa9bc0c2040>]

#+CAPTION: Blue (EuE 1/4) and Green (EuE 1/8); Red (AM 1/8); Orange (Analytical)
#+ATTR_HTML: :width 500px
[[file:img/Figure_2.png][file:~/PP/wlq/wiki/img/Figure_2.png]]

* Ideas
** Methods relly on using the =f= form
As numerical methods, be them Euler, Trapezoidal etc., use the fact
that $\dfrac{\partial{y_i}}{\partial{y_j}}=f_{ij}(y_1, y_2,
\ldots)$. Then, use the evaluation of $f_{ij}$, in a discrete step
scheme, so to approximate the $\mathbf{y}$ vector.

Therefore, mapping this mathematical formula $f_{ij}$ to a programming
function can generalize the process and help to build many kinds of
"evolvers". Each method will have a general rule for writting an evolver,
because they appear out of analytical considerations on approximating functions.

* A-stable and L-stable
** A-stable

#+begin_quote
The solution of this equation is $y(t) = e^{kt}$. This solution
approaches zero as $t\to \infty$  when  $\mathrm {Re} \,(k)<0$. If the
numerical method also exhibits this behaviour (for a fixed step size),
then the method is said to be A-stable.
#+end_quote

=A-stable= methods are those who are coherent with the general
behaviour of a function.

Not necessarily converges fast, or accurately. But, goes to the right
values over large times.

*** Runge-Kutta
#+begin_quote
It follows that explicit Runge–Kutta methods cannot be A-stable.
#+end_quote

** L-stable
=A-stable= and the growth-factor goes to zero, as z goes to infinity
(converges even for really large steps). 

* Wiki [[https://en.wikipedia.org/wiki/Stiff_equation#Etymology][example]] exponential decay
** The equation
\begin{equation}
\begin{aligned}
x(t)=x_{0}\left(-{\frac {1}{999}}e^{-1000t}+{\frac {1000}{999}}e^{-t}\right)\approx x_{0}e^{-t}.	
\end{aligned}
\end{equation}


So, that $f(y,t) = x'(t) = x_0.(\frac{1000}{999}e^{-1000t} - \frac{1000}{999}e^{-t})$ 

** Numerical Methods
*** EuE, h=1/4
**** The method
=Euler Explicit=

\begin{equation}
\begin{aligned}
y_{n+1}&=y_n + \Delta{t}.f(y_n, t_n) \\
&= y_n + \Delta{t}.f_n
\end{aligned}
\end{equation}

$\gamma$ will be your step functions.

**** =f= function
#+begin_src julia :session main :result output
    function f₁(n, Δt,x₀=1.0)
      return x₀*((1000/999)*exp(-1000*n*Δt)-(1000/999)*exp(-n*Δt))
    end

    function f₁(n, Δt)
      return ((1000/999)*exp(-1000*n*Δt)-(1000/999)*exp(-n*Δt))
    end
#+end_src

#+RESULTS:
: f₁

# #+begin_src julia :session main :result output
#   function f₁(y, n)
#     return -15*y[n]
#   end
# #+end_src

# #+RESULTS
# : f₁

**** EuE implementation
#+begin_src julia :session main :result output
  function EuE(y,f,n,Δt)
        return y[n] + Δt*f(y[n], n)
  end
#+end_src

#+RESULTS:
: EuE

***** EuE step function
#+begin_src julia :session main :result output
  function γ₁(f, y::Vector{Float64}, Δt)
      yl = copy(y)

      push!(yl, EuE(y,f,length(y),Δt))

      return yl
  end
#+end_src

#+RESULTS:
: γ₁

***** Initical condition
#+begin_src julia :session main :result output
  y₀=[1.]
#+end_src

#+RESULTS:
: [1.0]
***** Grid
#+begin_src julia :session main :result output
  tf = 1
  Δt = 1/4
  t = 0:Δt:tf
#+end_src

#+RESULTS:
: 0.0:0.25:1.0

***** Step function test
#+begin_src julia :session main :result output
γ₁(f₁, y₀, Δt)
#+end_src

#+RESULTS:
: [1.0, 0.9079380777849243]

#+begin_src julia :session main :result output
  st1 = γ₁(f₁, y₀, Δt)
  st2 = γ₁(f₁, st1, Δt)
  γ₁(f₁, st2, Δt)
#+end_src

#+RESULTS:
: [1.0, 0.9079380777849243, 0.8672235383623333, 0.8486675825957147]

**** Evolver
# (<[(
#+begin_src julia :session main :result output
  function evolveₖ(method, Δt, t_final=1.0, y₀=1.0, f=f₁)

      T = y₀
      t = 0.0

      ts = [t]
      results = [T]

      while t < t_final
          Tl = method(f,T,Δt) # new

          T = copy(Tl)
          push!(results, T)

          t += Δt
          push!(ts, t)
      end

      return ts, results
  end

#+end_src

#+RESULTS:
: evolveₖ

**** Tests
***** Initical condition
#+begin_src julia :session main :result output
  y₀=[1.]
#+end_src

#+RESULTS:
: [1.0]

***** Calling the Evolver
#+begin_src julia :session main :result output
  res = evolveₖ(γ₁, Δt, 10.0, y₀, f₁)
#+end_src

#+RESULTS:
: Output suppressed (line too long)

*** EuE, h=1/8
#+begin_src julia :session main :result output
  Δt = 1/8
#+end_src

#+RESULTS:
: 0.125

#+begin_src julia :session main :result output
  res2 = evolveₖ(γ₁, Δt, 10.0, y₀, f₁)
#+end_src

#+RESULTS:
: Output suppressed (line too long)

*** Adams-Moulton, h=1/8
**** The method
=Trapezoidal=
\begin{equation}
\begin{aligned}
y_{n+1}&=y_n + \dfrac{1}{2}\Delta{t}.(f(y_n, t_n) + f(y_{n+1}, t_{n+1})) 
\end{aligned}
\end{equation}
**** AM Evolver
#+begin_src julia :session main :result output
  function AM(y,f,n,Δt)
    return y[n] + (1/2)*(Δt)*(f(n,Δt)+f(n+1,Δt))
  end
#+end_src

#+RESULTS:
: AM

**** AM step function
#+begin_src julia :session main :result output
  function γ₂(f, y::Vector{Float64}, Δt)
      yl = copy(y)

      push!(yl, AM(y,f,length(y),Δt))

      return yl
  end
#+end_src

#+RESULTS:
: γ₂

**** Calling the Evolver
#+begin_src julia :session main :result output
  res3 = evolveₖ(γ₂, Δt, 10.0, y₀, f₁)
#+end_src

#+RESULTS:
: Output suppressed (line too long)

*** Analytical
#+begin_src julia :session main :result output
  ts = 0:Δt:10
#+end_src

#+RESULTS:
: 0.0:0.25:10.0

#+begin_src julia :session main :result output
ys = ((-1/999)*exp.(-1000*t)+(1000/999)*exp.(-t))

#+end_src

#+RESULTS:
: [1.0, 0.7795803634348398, 0.6071377975101436, 0.47283939213314785, 0.3682476888603027, 0.2867915884486388, 0.22335351366209194, 0.17394789134178695, 0.13547075399060332, 0.1055047292911555, 0.0821671657896885, 0.06399185305976735, 0.04983690527313708, 0.038813020852574584, 0.030227611033351854, 0.023541287143152262, 0.018333972861595774, 0.014278512421420678, 0.011120116654897204, 0.008660355558679314, 0.006744691690776244, 0.005252771170351737, 0.004090862300764832, 0.0031859667632729402, 0.0024812334100764353, 0.00193238652275046, 0.0015049441371146873, 0.001172051672463638, 0.0009127947603148311, 0.0007108852741166657, 0.0005536380081559896, 0.00043117371428997756, 0.0003357984263288407, 0.0002615200773790466, 0.00020367204105169588, 0.00015861994506081209, 0.00012353333742410368, 9.620785992131602e-5, 7.492675664434495e-5, 5.835301674761643e-5, 4.544537513762248e-5]

*** Plots

#+begin_src julia :session main :result output
pyplot()
#+end_src

#+RESULTS:
: Plots.PyPlotBackend()


#+begin_src julia :session main :result graphic results
  PyPlot.plot(res[1], res[2][length(res[2])], label="EuE 1/4")
#+end_src

#+RESULTS:
: PyCall.PyObject[PyObject <matplotlib.lines.Line2D object at 0x7f3cb9a81ca0>]

#+begin_src julia :session main :result output
  Plots.plot(res[1], res[2][length(res[2])], label="EuE 1/4")
#+end_src

#+RESULTS:
: Plot{Plots.GRBackend() n=1}


#+begin_src julia :session main :result output
  PyPlot.plot(res2[1], res2[2][length(res2[2])], label="EuE 1/8")
#+end_src

#+RESULTS:
: PyCall.PyObject[PyObject <matplotlib.lines.Line2D object at 0x7f3cb9a75760>]

#+begin_src julia :session main :result output
  Plots.plot!(res2[1], res2[2][length(res2[2])], label="EuE 1/8")
#+end_src

#+RESULTS:
: Plot{Plots.GRBackend() n=3}


#+begin_src julia :session main :result output
  PyPlot.plot(res3[1], res3[2][length(res3[2])], label="Trapezoidal 1/8")
#+end_src

#+RESULTS:
: PyCall.PyObject[PyObject <matplotlib.lines.Line2D object at 0x7f3cb9a75af0>]
#+begin_src julia :session main :result output
  Plots.plot!(res3[1], res3[2][length(res3[2])], label="Trapezoidal 1/8")
#+end_src

#+RESULTS:
: Plot{Plots.GRBackend() n=2}


#+begin_src julia :session main :result graphic results
PyPlot.plot(ts,ys, label='Analytical')
#+end_src

#+RESULTS:

#+begin_src julia :session main :result output
Plots.plot!(ts,ys, label="Analytical")
#+end_src


#+CAPTION: Blue (EuE 1/4) and Orange (EuE 1/8); Green (AM 1/8); Purple (Analytical)
#+ATTR_HTML: :width 500px
[[file:exponential.png][file:~/PP/wlq/wiki/exponential.png]]

* TODO Complex-plane regions
** Methods do determine the growth-factor
** Half plane
* TODO Multistep Methods

