#+startup: latexpreview
#+startup: imagepreview

#+begin_src julia :session main :result output :export both
  using Pkg;
  Pkg.activate(./)
#+end_src

#+RESULTS:

#+begin_src julia :session main :result output
  Pkg.add("Plots")
  Pkg.add("ImplicitEquations")
#+end_src

#+RESULTS:



* Doctor's program
https://www.youtube.com/playlist?list=PLo4jXE-LdDTQbSErI2ftYD4PLJjVMaiox
** Numerical problems
*** ODE
\begin{equation}
\begin{aligned}
\begin{cases}
\dfrac{dy}{dt} = f(y(t),t)\\
y(1) = y_0
\end{cases}
\end{aligned}
\end{equation}

*** Integral
$y(t) = y(t_0) + \int_{t_{0}}^t{f(y(s),s)}\text{d}s$
** Consequences of choice in method

- $\overline{Y(t_n)}$ EDO solution in $t=t_n$ (function)
- $y_n$ discrate solution (numerical method) (vector)



* Euler Explicit (EuE)
*** Using Taylor's series
\begin{equation}
\begin{aligned}
\overline{Y}(t_n+1) &= \overline{Y_n}+\Delta{t}.\overline{Y}'(t_n) + O(\Delta{t}^2) \\
\implies \overline{Y}(t_n+1) &= \overline{Y_n}+\Delta{t}.f(\overline{Y}(t_n), t_n)  + \biggr\rvert_{\text{cut}} O(\Delta{t}^2)
\end{aligned}
\end{equation}

\begin{equation}
\begin{aligned}
y_{n+1}&=y_n + \Delta{t}.f(y_n, t_n) \\
&= y_n + \Delta{t}.f_n
\end{aligned}
\end{equation}

* Euler Implicit (EuI)
  Use
  
\begin{equation}
\begin{aligned}
y_{n} = y_{n+1} - \Delta{}t.f(y_{n+1},t_{n+1})
\end{aligned}
\end{equation}

We have, teoretically, $y_n$ given.

Taking all algebraic terms to one side and calling it $F(y_{n+1},t_n, t_{n+1})$, we have:

\begin{equation}
\begin{aligned}
&F(y_{n+1},t_n, t_{n+1}) = (y_{n+1} - y_{n}) - \Delta{}t.f(y_{n+1},t_{n+1})\\
&\land \, F(y_{n+1},t_n, t_{n+1})=0
\end{aligned}
\end{equation}

Which can be solved by method like =Newton-Raphson=.
  #+begin_src julia :session main :result output
    using Pkg;
    Pkg.add("")
  #+end_src

  #+RESULTS:
  : 4

* Trapezoid
Using $t_{n+ \frac{1}{2}}$ and Taylor Series, we can derive with EuE and EuI expressions, the trapezoid rule:
\begin{equation}
\begin{aligned}
y_{n+1} = y_{n} + \dfrac{\Delta{t}}{2}\left( f(y_n,t_n) + f(y_{n+1}, t_{n+1}) \right)
\end{aligned}
\end{equation}


* Finding some roots in julia

#+begin_src julia :session main :result output :export both
  using Pkg;
  Pkg.add("Roots")
  Pkg.add("ForwardDiff")
  using Roots
  using ForwardDiff
#+end_src

#+RESULTS:
# <
#+begin_src julia :session main :result output :export both
  D(f) = x -> ForwardDiff.derivative(f,float(x))
  f(x) = sin(x)^2 - 2x - 0.4
#+end_src

#+RESULTS:
: f

#+begin_src julia :session main :result output :export both
find_zero((f,D(f)), 1, Roots.Newton())
#+end_src

#+RESULTS:
: -0.1833745060257651

#+begin_src julia :session main :result output :export both
1+1
#+end_src

#+RESULTS:
: 2

* TODO Integral view of EuE, EuI, Trap
* Test Problem and Absolute Stability
# Problema Teste / Estabilidade Absoluta

\begin{equation}
\begin{aligned}
\begin{cases}
\dfrac{\text{d}y}{\text{d}t}= \lambda{}y\\
y(t_0) = y_0
\end{cases}
\end{aligned}
\end{equation}

** EuE
\begin{equation}
\begin{aligned}
y_{n+1}&= y_n + \Delta{t}.f_n\\
\implies y_{n+1} &= y_{n} + \Delta{t}.\lambda{} y_{n}\\
\Leftrightarrow y_{n+1} &= y_{n}.(1+ \Delta{t}\lambda{}), \, \forall{n}\\
\implies y_n &= \left(1+ \Delta{t}\lambda{}\right)^n y_0
\end{aligned}
\end{equation}

This model would only makes sense for $|1+ \Delta{t} \lambda|<1, \,
\zeta(t) \in \mathbb{C}$ [[[*Annonymous expressions][Annonymous expressions]]].

Let $z = \lambda{}\Delta{t}$, we can rewrite $\zeta(t)$ as $|z -
(-1)|<1$.

#+begin_src julia :session main :result output
using ImplicitEquations, Plots
#+end_src

#+RESULTS:

#+begin_src julia :session main :result output
f(a,b) = sqrt((a+1)^2 + b^2)
#+end_src

#+RESULTS:
: f

#+BEGIN_SRC julia :results file graphics :file curve.png :output-dir figs :session main
  plot(f ≪ 1, fill=(0,:blue))
  savefig("figs/curve.png")
#+end_src

#+RESULTS:
[[file:figs/curve.png]]

#+begin_src julia :session main :result output
  a,b = -0,0
  f(x,y) = (y)^2 + (x+1)^2 + a*y^2 + b*x^2
  plot(f==1)
#+end_src

#+RESULTS:
: Plot{Plots.GRBackend() n=0}

** EuI
\begin{equation}
\begin{aligned}
y_{n+1}&= y_n + \Delta{t}.f_n\\
\implies y_{n+1} &= y_{n} + \Delta{t}.\lambda{} y_{n}\\
\Leftrightarrow y_{n+1} &= y_{n}.(1+ \Delta{t}\lambda{}), \, \forall{n}\\
\implies y_n &= \left(1+ \Delta{t}\lambda{}\right)^n y_0
\end{aligned}
\end{equation}


\begin{equation}
\begin{aligned}
y_{n+1} = y_n + \Delta{t}\lambda y_{n+1}\\
(1 - \Delta{t}\lambda{})y_{n+1} = y_n\\
y_{n+1} = \left(\dfrac{1}{1- \Delta{t} \lambda}\right) y_n
\end{aligned}
\end{equation}

Therefore, the stability region is given by,
# <
\begin{equation}
\begin{aligned}
& \biggr\rvert\dfrac{1}{1- \Delta{t} \lambda} \biggr\rvert < 1 \\
\implies & |1 - \Delta{t} \lambda{}| > 1 \\
\Leftrightarrow & |z - 1| > 1
\end{aligned}
\end{equation}


#+begin_src julia :session main :result output
f(a,b) = sqrt((a-1)^2 + b^2)
#+end_src

#+RESULTS:
: f

#+BEGIN_SRC julia :results file graphics :file curve2.png :output-dir figs :session main
  plot(f ≫ 1, fill=(0,:blue))
  savefig("figs/curve2.png")
#+end_src

#+RESULTS:
[[file:figs/curve2.png]]


* Notation
** Annonymous expressions
For every expression that do not have a name, but we contextually are
talking about it, we will call it $\lambda(\mathbf{x})$. If $\lambda$
is in use, we will call it $\zeta(\mathbf{x})$, etc. The $\mathbf{x}$
are all variables used in the expression that are relevant.

